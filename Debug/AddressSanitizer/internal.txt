enable coredump
export ASAN_OPTIONS=abort_on_error=1:disable_coredump=0:unmap_shadow_onexit=1
strace:
mmap(0x7fff7000    , 268435456     , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fff7000
mmap(0x2008fff7000 , 15392894357504, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2008fff7000
mmap(0x8fff7000    , 2199023255552 , PROT_NONE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x8fff7000
mmap(0x600000000000, 4398046523392 , PROT_NONE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x600000000000

proc/pid/maps
7fff7000-8fff7000 rw-p 00000000 00:00 0
8fff7000-2008fff7000 ---p 00000000 00:00 0
2008fff7000-10007fff8000 rw-p 00000000 00:00 0  //16TB=10007fff8000
       _________
      |         | 
      | gArray  |<-------------5555557550e0 ->[0][1][2][3][4][5][6][7]
      |  [15]   | 														[0][1][2][3][4][5][6]
      |         | 
      |_________|
      |         |<-------------10007fff8000
      |         |      |    
      |         |      |    <--aab2aae2a1d
      | Shadow  |     16TB  
      | bitmap  |      |
      |         |      |
      |_________|<-------------2008fff7000 pShadowofHeapBase
      |         |
      |         |
      |         |
      |         |
      |         |
      |_________|
      |         |<-------------8fff7000
      | Shadow  |
      |_________|<-------------7fff7000 pLowShadowBase
      |         |
      |         |
      |         |
      |         |
      |         |
      |         |
      |_________|

char gArray[15] = {0};
(gdb) p &gArray
$2 = (char (*)[15]) 0x5555557550e0 

pGlobalAddr = 0x5555557550ef
pLowShadowBase = 0x7fff8000

pShadowOfgArray = pLowShadowBase+(pGlobalAddr/8) = 0xaab2aae2a1d
pShadowOfgArray[0] ==7 : The leading 7 bytes are valid to access.  0: all 8 bytes can be accessed.
but pGlobalAddr & 0x7= 0x5555557550ef&0x7 = 0x7, it means it tries to access the 8th byte, [0]~[7], so it's invalid access
if[(pShadowOfgArray[0] && pShadowOfgArray[0]>=pGlobalAddr) ==0 ]					    
	goto valid_access
else
	__asan_report_load1

  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7

每8个字节的内存对应一个字节的影子内存，影子内存中每个字节存取一个数字k,如果k=0，则表示该影子内存对应的8个字节的内存都能访问，如果0<k<7,表示前k个字节可以访问，如果k为负数，不同的数字表示不同的错误
  0x0aab2aae2a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0aab2aae2a10: 00 00 00 00 00 00 00 00 00 00 00 00 00[07]f9 f9
  0x0aab2aae2a20: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00

Shadow   Applicateion Memory
[00]	 |Y|Y|Y|Y|Y|Y|Y|Y| <all 8 bytes are valid to access
[07]	 |Y|Y|Y|Y|Y|Y|Y|N| <-0x5555557550ef only leading 7 bytes are valid to access
[f9]	 |N|N|N|N|N|N|N|N| <- f9=-6<0; 

   0x00005555555549ea <+0>:     push   %rbp
   0x00005555555549eb <+1>:     mov    %rsp,%rbp
   0x00005555555549ee <+4>:     lea    0x2006fa(%rip),%rax  # 0x5555557550ef global variable's address
   0x00005555555549f5 <+11>:    mov    %rax,%rdx
   0x00005555555549f8 <+14>:    shr    $0x3,%rdx          	#0x5555557550ef/8
   0x00005555555549fc <+18>:    add    $0x7fff8000,%rdx   	#pLowShadowBase=$0x7fff8000  pShadowOfgArray = pLowShadowBase+(pGlobalAddr/8) 
   0x0000555555554a03 <+25>:    movzbl (%rdx),%edx        	#edx = (unsigned char*)(pShadowOfgArray)[0]
   0x0000555555554a06 <+28>:    test   %dl,%dl
   0x0000555555554a08 <+30>:    setne  %cl                	#if(edx[0]) cl=1
=> 0x0000555555554a0b <+33>:    mov    %rax,%rsi
   0x0000555555554a0e <+36>:    and    $0x7,%esi
   0x0000555555554a11 <+39>:    cmp    %dl,%sil           	#if (unsigned char*)(pShadowOfgArray)[0] > (pGlobal&0x7)
   0x0000555555554a14 <+42>:    setge  %dl                	#  dl=1
   0x0000555555554a17 <+45>:    and    %ecx,%edx          	#if ((unsigned char*)(pShadowOfgArray)[0]) && 
														  													  	#		((unsigned char*)(pShadowOfgArray)[0] >= (pGlobal&0x7))
   0x0000555555554a19 <+47>:    test   %dl,%dl            	#    goto valid_logic
   0x0000555555554a1b <+49>:    je     0x555555554a25 <main()+59>
   0x0000555555554a1d <+51>:    mov    %rax,%rdi
   0x0000555555554a20 <+54>:    callq  0x5555555548a0 <__asan_report_load1@plt>
   0x0000555555554a25 <+59>:    movzbl 0x2006c3(%rip),%eax        # 0x5555557550ef
   0x0000555555554a2c <+66>:    movsbl %al,%eax
   0x0000555555554a2f <+69>:    mov    %eax,%esi
   0x0000555555554a31 <+71>:    lea    0x108(%rip),%rdi        # 0x555555554b40
   0x0000555555554a38 <+78>:    mov    $0x0,%eax
   0x0000555555554a3d <+83>:    callq  0x555555554870 <printf@plt>
   0x0000555555554a42 <+88>:    mov    $0x0,%eax
   0x0000555555554a47 <+93>:    pop    %rbp
   0x0000555555554a48 <+94>:    retq

